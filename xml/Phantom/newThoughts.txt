Why is CSS good?
Firstly because it enables the legendary separation of style from content that has been touted since the beginning of the web (and probably far before, if SGML and LaTeX are any any indication).  If the style is separated from the content, then the style can be updated separate from the content, which is a good thing.  Similarly, client programs are free to ignore any parts of the style that they don't understand, or can't render, thus letting pages degrade gracefully.  While it's never possible to achieve a total separation of style from content ("The medium is the message."), separating them as much as possible does seem to have certain benefits.

Productivity.
I've felt about 100 times more productive on Thursday and Friday than I have for the preceeding weeks.  I think I can attribute this to a couple of factors.  Firstly, I've got a big list of things to do, so whenever I finish what I'm working on, and check it in, and test it, it's immediately obvious what I should be doing next.  If I don't want to work on the top thing on the list, I'm free to pick any of the others, since they all need to be done.  Secondly, I've got a good starting point.  Before I started work on Thursday, the application compiled and linked without any errors or memory leaks.  I could load it onto my Palm, and it ran.  Not flawlessly, because then there wouldn't have been anything for me to do, but it did most of what it was supposed to do.  The big benefit of this is that I know that if something breaks, it's my fault, and the amount of code I change to fix any bug, or implement any feature, is really quite small when compared to the whole project.  To be completely honest, this did trip me up on the last memory leak I had, since it turned out to be in the libraries we had written, I was just using functionality which hadn't been used before.  But even then, I got a feeling of it all being worth it, because I fixed a bug which could have hit anybody, and now won't.  Also, since the features I'm implementing or bugs I'm fixing are relatively small, the chance that I'll make a mistake in the implementation is fairly small, since I can hold all the logic in my head at the same time.  It's not that I'm a super genius, it's that the stuff I'm doing is simple in its scope.  Thirdly, Colin's not here, so I'm the only person working on the code.  This means that I can change the interface to a class, and not worry about Colin developing against an old version.  I just have to compile the project, and I'll be told what's broken.  then I fix it, and we're done.

Typing.
